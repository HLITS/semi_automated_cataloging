[
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "040$a",
    "expression": "join ([cells['040$a'].value,cells['040$c'].value,cells['040$d'].value],';')",
    "onError": "keep-original",
    "newColumnName": "OCLC_symbols",
    "columnInsertIndex": 0,
    "description": "Create column OCLC_symbols at index 0 based on column 040$a using expression join ([cells['040$a'].value,cells['040$c'].value,cells['040$d'].value],';')"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "OCLC_symbols",
    "expression": "grel:if(filter(value.split(\";\"),v,not(or(v.startsWith(\"OCLC\"),inArray([\"ACCAR\",\"AUXAM\",\"BCBTC\",\"BDX\",\"BENTH\",\"BIBBD\",\"BLOOM\",\"BTCTA\",\"BWK\",\"BWX\",\"C3L\",\"CASSC\",\"CHILD\",\"CNPIT\",\"DEGRU\",\"DEUTG\",\"DON\",\"EBLCP\",\"EMGRP\",\"ERASA\",\"ERASP\",\"EVIEW\",\"FRGNR\",\"GGVRL\",\"HUPRS\",\"I5B\",\"IBEAM\",\"INARC\",\"KNOPY\",\"NARDE\",\"NFBCA\",\"NHMCR\",\"NYDIS\",\"NYGHE\",\"NYINF\",\"OCL\",\"OHX\",\"PL#\",\"PLAWI\",\"PLAYA\",\"RECBC\",\"RECBK\",\"RECBX\",\"RTH\",\"SEGPB\",\"SMPUB\",\"STF\",\"TDF\",\"TETON\",\"TRCLS\",\"TYFRS\",\"TZT\",\"UKAHL\",\"UKAMD\",\"UKDBK\",\"UKGRL\",\"UKHST\",\"UKKRT\",\"UKMGB\",\"UKOUP\",\"UKSKG\",\"ULVER\",\"UNEBO\",\"WKLRS\",\"YDX\",\"YDXCP\",\"YDX/YDXCP\",\"ZCU\"],v)))).length()>=1,\"\",\"vendor record not edited by library\")",
    "onError": "set-to-blank",
    "newColumnName": "OCLC symbol warning",
    "columnInsertIndex": 0,
    "description": "Create column OCLC symbol warning at index 0 based on column OCLC_symbols using expression grel:if(filter(value.split(\";\"),v,not(or(v.startsWith(\"OCLC\"),inArray([\"ACCAR\",\"AUXAM\",\"BCBTC\",\"BDX\",\"BENTH\",\"BIBBD\",\"BLOOM\",\"BTCTA\",\"BWK\",\"BWX\",\"C3L\",\"CASSC\",\"CHILD\",\"CNPIT\",\"DEGRU\",\"DEUTG\",\"DON\",\"EBLCP\",\"EMGRP\",\"ERASA\",\"ERASP\",\"EVIEW\",\"FRGNR\",\"GGVRL\",\"HUPRS\",\"I5B\",\"IBEAM\",\"INARC\",\"KNOPY\",\"NARDE\",\"NFBCA\",\"NHMCR\",\"NYDIS\",\"NYGHE\",\"NYINF\",\"OCL\",\"OHX\",\"PL#\",\"PLAWI\",\"PLAYA\",\"RECBC\",\"RECBK\",\"RECBX\",\"RTH\",\"SEGPB\",\"SMPUB\",\"STF\",\"TDF\",\"TETON\",\"TRCLS\",\"TYFRS\",\"TZT\",\"UKAHL\",\"UKAMD\",\"UKDBK\",\"UKGRL\",\"UKHST\",\"UKKRT\",\"UKMGB\",\"UKOUP\",\"UKSKG\",\"ULVER\",\"UNEBO\",\"WKLRS\",\"YDX\",\"YDXCP\",\"YDX/YDXCP\",\"ZCU\"],v)))).length()>=1,\"\",\"vendor record not edited by library\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "040$b",
    "expression": "grel:if(value==\"eng\", \"\", \"Language of cataloging is \" + value)",
    "onError": "set-to-blank",
    "newColumnName": "040$b warning",
    "columnInsertIndex": 0,
    "description": "Create column 040$b warning at index 0 based on column 040$b using expression grel:if(value==\"eng\", \"\", \"Language of cataloging is \" + value)"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "000$17:1",
    "expression": "grel:if((value !=\"I\").and(value !=\"8\").and(value !=\"\"), \"encoding level is \" + value, \"\")",
    "onError": "set-to-blank",
    "newColumnName": "000$17:1 warning",
    "columnInsertIndex": 0,
    "description": "Create column 000$17:1 warning at index 0 based on column 000$17:1 using expression grel:if((value !=\"I\").and(value !=\"8\").and(value !=\"\"), \"encoding level is \" + value, \"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "000$06",
    "expression": "grel:if(value!=\"a\", \"Record type is non-book\",\"\")",
    "onError": "set-to-blank",
    "newColumnName": "000$06 warning",
    "columnInsertIndex": 0,
    "description": "Create column 000$06 warning at index 0 based on column 000$06 using expression grel:if(value!=\"a\", \"Record type is non-book\",\"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "008$23",
    "expression": "grel:if(value==\"o\", \"Form of item is online resource\",\"\")",
    "onError": "set-to-blank",
    "newColumnName": "008$23 warning",
    "columnInsertIndex": 0,
    "description": "Create column 008$23 warning at index 0 based on column 008$23 using expression grel:if(value==\"o\", \"Form of item is online resource\",\"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "264",
    "expression": "grel:if(and(isBlank(cells[\"260\"].value),isBlank(cells[\"264\"].value)),\"lacks imprint\",\"\")",
    "onError": "set-to-blank",
    "newColumnName": "26X warning",
    "columnInsertIndex": 0,
    "description": "Create column 26X warning at index 0 based on column 264 using expression grel:if(and(isBlank(cells[\"260\"].value),isBlank(cells[\"264\"].value)),\"lacks imprint\",\"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "040$e",
    "expression": "grel:if(value.contains(\"rda\"), 100, 0)",
    "onError": "set-to-blank",
    "newColumnName": "040$e points",
    "columnInsertIndex": 0,
    "description": "Create column 040$e points at index 0 based on column 040$e using expression grel:if(value.contains(\"rda\"), 100, 0)"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "OCLC_symbols",
    "expression": "grel:if(or(cells[\"OCLC_symbols\"].value.contains(\"DLC\"),cells[\"042$a\"].value == \"pcc\"), 100, 0)",
    "onError": "set-to-blank",
    "newColumnName": "040/042 points",
    "columnInsertIndex": 0,
    "description": "Create column 040/042 points at index 0 based on column OCLC_symbols using expression grel:if(or(cells[\"OCLC_symbols\"].value.contains(\"DLC\"),cells[\"042$a\"].value == \"pcc\"), 100, 0)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "050",
    "expression": "grel:forEach(value.split(\";\"),v,v.split(\"$a\")[1]).join(\"\\n\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column 050 using expression grel:forEach(value.split(\";\"),v,v.split(\"$a\")[1]).join(\"\\n\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "090",
    "expression": "grel:forEach(value.split(\";\"),v,v.split(\"$a\")[1]).join(\"\\n\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column 090 using expression grel:forEach(value.split(\";\"),v,v.split(\"$a\")[1]).join(\"\\n\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "090",
    "expression": "grel:if(isNonBlank(cells['050'].value),cells['050'].value.split(\"\\n\")[0],if(isNonBlank(cells['090'].value),cells['090'].value.split(\"\\n\")[0],\"\"))",
    "onError": "set-to-blank",
    "newColumnName": "Call number",
    "columnInsertIndex": 0,
    "description": "Create column Call number at index 0 based on column 090 using expression grel:if(isNonBlank(cells['050'].value),cells['050'].value.split(\"\\n\")[0],if(isNonBlank(cells['090'].value),cells['090'].value.split(\"\\n\")[0],\"\"))"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Call number",
    "expression": "grel:if(or(inArray([\"AN\",\"FC\",\"NH\",\"NJ\",\"PZ\",\"QS\",\"QT\",\"QZ\"],value.substring(0,2)), value.startsWith(\"W\"), value.startsWith(\"PS8\"), value.substring(0,5).contains(/Z[1-9][2-9][0-9]{2}/) ),\"Unacceptable class or call number range\",\"\")",
    "onError": "set-to-blank",
    "newColumnName": "Call number class warning",
    "columnInsertIndex": 0,
    "description": "Create column Call number class warning at index 0 based on column Call number using expression grel:if(or(inArray([\"AN\",\"FC\",\"NH\",\"NJ\",\"PZ\",\"QS\",\"QT\",\"QZ\"],value.substring(0,2)), value.startsWith(\"W\"), value.startsWith(\"PS8\"), value.substring(0,5).contains(/Z[1-9][2-9][0-9]{2}/) ),\"Unacceptable class or call number range\",\"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Call number",
    "expression": "grel:if(or(value.toLowercase().contains(\"bd.\"), value.toLowercase().contains(\"band\"), value.toLowercase().contains(\"v.\"), value.toLowercase().contains(\"vol.\"), value.toLowercase().contains(\"pt.\"), value.toLowercase().contains(\"part\")),\"Classed-together call number\",\"\")",
    "onError": "set-to-blank",
    "newColumnName": "Call number multipart warning",
    "columnInsertIndex": 0,
    "description": "Create column Call number multipart warning at index 0 based on column Call number using expression grel:if(or(value.toLowercase().contains(\"bd.\"), value.toLowercase().contains(\"band\"), value.toLowercase().contains(\"v.\"), value.toLowercase().contains(\"vol.\"), value.toLowercase().contains(\"pt.\"), value.toLowercase().contains(\"part\")),\"Classed-together call number\",\"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Call number",
    "expression": "grel:if(forNonBlank(cells[\"Call number\"].value,v,and(v.contains(\"$b\"), or(v.contains(/20\\d{2}/), v.contains(/19\\d{2}/))),false),\"\",\"no usable call number\")",
    "onError": "set-to-blank",
    "newColumnName": "Call number completeness warning",
    "columnInsertIndex": 0,
    "description": "Create column Call number completeness warning at index 0 based on column Call number using expression grel:if(forNonBlank(cells[\"Call number\"].value,v,and(v.contains(\"$b\"), or(v.contains(/20\\d{2}/), v.contains(/19\\d{2}/))),false),\"\",\"no usable call number\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "300$a",
    "expression": "grel:if(isBlank(value), \"lacks physical extent\", if(value.contains(\"volumes\"),\"300$a indicates work in parts\",\"\"))",
    "onError": "set-to-blank",
    "newColumnName": "300$a warning",
    "columnInsertIndex": 0,
    "description": "Create column 300$a warning at index 0 based on column 300$a using expression grel:if(isBlank(value), \"lacks physical extent\", if(value.contains(\"volumes\"),\"300$a indicates work in parts\",\"\"))"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "300$c",
    "expression": "grel:if(isNonBlank(value), 100, 0)",
    "onError": "set-to-blank",
    "newColumnName": "300$c points",
    "columnInsertIndex": 0,
    "description": "Create column 300$c points at index 0 based on column 300$c using expression grel:if(isNonBlank(value), 100, 0)"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "300$e",
    "expression": "grel:if(isNonBlank(value),\"Accompanying material\", \"\")",
    "onError": "set-to-blank",
    "newColumnName": "300$e warning",
    "columnInsertIndex": 0,
    "description": "Create column 300$e warning at index 0 based on column 300$e using expression grel:if(isNonBlank(value),\"Accompanying material\", \"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "245$p",
    "expression": "grel:if(or(isNonBlank(cells[\"245$n\"].value), isNonBlank(cells[\"245$p\"].value)), \"Numbering indicates work in parts\", \"\")",
    "onError": "set-to-blank",
    "newColumnName": "245$n$p warning",
    "columnInsertIndex": 0,
    "description": "Create column 245$n$p warning at index 0 based on column 245$p using expression grel:if(or(isNonBlank(cells[\"245$n\"].value), isNonBlank(cells[\"245$p\"].value)), \"Numbering indicates work in parts\", \"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "651",
    "expression": "grel:if(\nor(\nforNonBlank(cells[\"600\"].value,v,filter(v.split(\";\"),w,w.substring(1,2)==\"0\").length()>0,false), forNonBlank(cells[\"650\"].value,v,filter(v.split(\";\"),w,w.substring(1,2)==\"0\").length()>0,false),\nforNonBlank(cells[\"651\"].value,v,filter(v.split(\";\"),w,w.substring(1,2)==\"0\").length()>0,false)\n),\n\"\",\"no LC subject headings\")",
    "onError": "set-to-blank",
    "newColumnName": "6xx warning",
    "columnInsertIndex": 0,
    "description": "Create column 6xx warning at index 0 based on column 651 using expression grel:if(\nor(\nforNonBlank(cells[\"600\"].value,v,filter(v.split(\";\"),w,w.substring(1,2)==\"0\").length()>0,false), forNonBlank(cells[\"650\"].value,v,filter(v.split(\";\"),w,w.substring(1,2)==\"0\").length()>0,false),\nforNonBlank(cells[\"651\"].value,v,filter(v.split(\";\"),w,w.substring(1,2)==\"0\").length()>0,false)\n),\n\"\",\"no LC subject headings\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "655",
    "expression": "grel:if(isNonBlank(value), 100, 0)",
    "onError": "set-to-blank",
    "newColumnName": "655 points",
    "columnInsertIndex": 0,
    "description": "Create column 655 points at index 0 based on column 655 using expression grel:if(isNonBlank(value), 100, 0)"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "020$a",
    "expression": "grel:value.find(/(\\d{13})/).sort()[0]",
    "onError": "set-to-blank",
    "newColumnName": "isbn13",
    "columnInsertIndex": 0,
    "description": "Create column isbn13 at index 0 based on column 020$a using expression grel:value.find(/(\\d{13})/).sort()[0]"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "020$a",
    "expression": "grel:filter(value.split(\";\"),v,v.trim().length()==10).sort()[0].trim()",
    "onError": "set-to-blank",
    "newColumnName": "isbn10",
    "columnInsertIndex": 0,
    "description": "Create column isbn10 at index 0 based on column 020$a using expression grel:filter(value.split(\";\"),v,v.trim().length()==10).sort()[0].trim()"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "000$06",
    "expression": "grel:cells[\"040$e points\"].value + cells[\"040/042 points\"].value + cells[\"300$c points\"].value + cells[\"655 points\"].value",
    "onError": "set-to-blank",
    "newColumnName": "Record sorting points",
    "columnInsertIndex": 0,
    "description": "Create column Record sorting points at index 0 based on column 000$06 using expression grel:cells[\"040$e points\"].value + cells[\"040/042 points\"].value + cells[\"300$c points\"].value + cells[\"655 points\"].value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "000$06",
    "expression": "grel:filter([cells[\"OCLC symbol warning\"].value, cells[\"040$b warning\"].value, cells[\"000$06 warning\"].value, cells[\"008$23 warning\"].value, cells['245$n$p warning'].value, cells['26X warning'].value, cells['300$a warning'].value, cells['300$e warning'].value, cells['Call number completeness warning'].value, cells['Call number multipart warning'].value, cells['Call number class warning'].value, cells['6xx warning'].value, cells[\"000$17:1 warning\"].value ],v,isNonBlank(v)).join(\"\\n\")",
    "onError": "set-to-blank",
    "newColumnName": "Record warnings",
    "columnInsertIndex": 0,
    "description": "Create column Record warnings at index 0 based on column 000$06 using expression grel:filter([cells[\"OCLC symbol warning\"].value, cells[\"040$b warning\"].value, cells[\"000$06 warning\"].value, cells[\"008$23 warning\"].value, cells['245$n$p warning'].value, cells['26X warning'].value, cells['300$a warning'].value, cells['300$e warning'].value, cells['Call number completeness warning'].value, cells['Call number multipart warning'].value, cells['Call number class warning'].value, cells['6xx warning'].value, cells[\"000$17:1 warning\"].value ],v,isNonBlank(v)).join(\"\\n\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Record warnings",
    "expression": "grel:if(value.contains(\"lacks\"), \"3|Record has insufficient description\", if(value.contains(\"vendor\"), \"4|Vendor record - not touched by library\", if(or(value.contains(\"Language\"), value.contains(\"online\")),\"5|Record is for online resource or uses non-english language of cataloging\", if(value.contains(\"non-book\"), \"6|Record type is non-book\", if(or(value.contains(\"work in parts\"), value.contains(\"Accompanying material\")),\"7|Record is for multipart\", if(value.contains(\"subject\"), \"8|Record lacks subject headings\", if(value.contains(\"call number\"), \"9|Loadable - record lacks usable call number\", \"10|Loadable - record has usable call number\") ) ) ) ) ) )",
    "onError": "set-to-blank",
    "newColumnName": "Record evaluation",
    "columnInsertIndex": 0,
    "description": "Create column Record evaluation at index 0 based on column Record warnings using expression grel:if(value.contains(\"lacks\"), \"3|Record has insufficient description\", if(value.contains(\"vendor\"), \"4|Vendor record - not touched by library\", if(or(value.contains(\"Language\"), value.contains(\"online\")),\"5|Record is for online resource or uses non-english language of cataloging\", if(value.contains(\"non-book\"), \"6|Record type is non-book\", if(or(value.contains(\"work in parts\"), value.contains(\"Accompanying material\")),\"7|Record is for multipart\", if(value.contains(\"subject\"), \"8|Record lacks subject headings\", if(value.contains(\"call number\"), \"9|Loadable - record lacks usable call number\", \"10|Loadable - record has usable call number\") ) ) ) ) ) )"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Record evaluation",
    "expression": "grel:value.split(\"|\")[0].toNumber()",
    "onError": "set-to-blank",
    "newColumnName": "Record evaluation value",
    "columnInsertIndex": 0,
    "description": "Create column Record evaluation value at index 0 based on column Record evaluation using expression grel:value.split(\"|\")[0].toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Record evaluation",
    "expression": "grel:value.split(\"|\")[1]",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column Record evaluation using expression grel:value.split(\"|\")[1]"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "020$a",
    "expression": "grel:coalesce(cells[\"isbn13\"].value,cells[\"isbn10\"].value)",
    "onError": "set-to-blank",
    "newColumnName": "isbn_matching",
    "columnInsertIndex": 0,
    "description": "Create column isbn_matching at index 0 based on column 020$a using expression grel:coalesce(cells[\"isbn13\"].value,cells[\"isbn10\"].value)"
  },
  {
    "op": "core/row-reorder",
    "mode": "row-based",
    "sorting": {
      "criteria": [
        {
          "valueType": "string",
          "column": "isbn_matching",
          "blankPosition": 2,
          "errorPosition": 1,
          "reverse": false,
          "caseSensitive": false
        },
        {
          "valueType": "number",
          "column": "Record evaluation value",
          "blankPosition": 2,
          "errorPosition": 1,
          "reverse": true
        },
        {
          "valueType": "number",
          "column": "Record sorting points",
          "blankPosition": 2,
          "errorPosition": 1,
          "reverse": true
        },
        {
          "valueType": "number",
          "column": "040/042 points",
          "blankPosition": 2,
          "errorPosition": 1,
          "reverse": true
        }
      ]
    },
    "description": "Reorder rows"
  },
  {
    "op": "core/blank-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "isbn_matching",
    "description": "Blank down cells in column isbn_matching"
  }
]
