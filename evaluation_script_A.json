[
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "040$b",
    "expression": "grel:if(value==\"eng\", \"\", \"Language of cataloging is \" + value) #TO DO: handle repeated values (\"eng;eng\") differently?",
    "onError": "set-to-blank",
    "newColumnName": "040$b warning",
    "columnInsertIndex": 6,
    "description": "Create column 040$b warning at index 6 based on column 040$b using expression grel:if(value==\"eng\", \"\", \"Language of cataloging is \" + value) #TO DO: handle repeated values (\"eng;eng\") differently?"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "000$17:1",
    "expression": "grel:if((value !=\"I\").and(value !=\"8\").and(value !=\"\"), \"encoding level is \" + value, \"\")",
    "onError": "set-to-blank",
    "newColumnName": "000$17:1 warning",
    "columnInsertIndex": 14,
    "description": "Create column 000$17:1 warning at index 14 based on column 000$17:1 using expression grel:if((value !=\"I\").and(value !=\"8\").and(value !=\"\"), \"encoding level is \" + value, \"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "260",
    "expression": "grel:if((value == \"\").and(cells[\"264\"].value ==\"\"), \"lacks imprint\", \"\")",
    "onError": "set-to-blank",
    "newColumnName": "26X warning",
    "columnInsertIndex": 12,
    "description": "Create column 26X warning at index 12 based on column 260 using expression grel:if((value == \"\").and(cells[\"264\"].value ==\"\"), \"lacks imprint\", \"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "040$e",
    "expression": "grel:if(value == \"rda\", 100, 0) #TO DO: deal with repeated values (\"rda;rda\")",
    "onError": "set-to-blank",
    "newColumnName": "040$e points",
    "columnInsertIndex": 10,
    "description": "Create column 040$e points at index 10 based on column 040$e using expression grel:if(value == \"rda\", 100, 0) #TO DO: deal with repeated values (\"rda;rda\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "040$a",
    "expression": "grel:if((value == \"DLC\").or(cells[\"040$c\"].value == \"DLC\").or(cells[\"042$a\"].value == \"pcc\"), 100, 0)",
    "onError": "set-to-blank",
    "newColumnName": "040/042 points",
    "columnInsertIndex": 5,
    "description": "Create column 040/042 points at index 5 based on column 040$a using expression grel:if((value == \"DLC\").or(cells[\"040$c\"].value == \"DLC\").or(cells[\"042$a\"].value == \"pcc\"), 100, 0)"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "050",
    "expression": "grel:if(\n(value.startsWith(\"AN\")).or(value.startsWith(\"FC\")).or(value.startsWith(\"NH\")).or(value.startsWith(\"NJ\")).or(value.startsWith(\"PZ\")).or(value.startsWith(\"QS\")).or(value.startsWith(\"QT\")).or(value.startsWith(\"QZ\")).or(value.startsWith(\"W\") \n.or(value.startsWith(\"PS8\"))\n), \"Unacceptable class or call number range\", null) # exclude AN, FC, NH, NJ, PS 8001-8599, PZ, QS -QZ, W+, Z1200+; TO DO: Z1200+",
    "onError": "keep-original",
    "newColumnName": "050 warning",
    "columnInsertIndex": 20,
    "description": "Create column 050 warning at index 20 based on column 050 using expression grel:if(\n(value.startsWith(\"AN\")).or(value.startsWith(\"FC\")).or(value.startsWith(\"NH\")).or(value.startsWith(\"NJ\")).or(value.startsWith(\"PZ\")).or(value.startsWith(\"QS\")).or(value.startsWith(\"QT\")).or(value.startsWith(\"QZ\")).or(value.startsWith(\"W\") \n.or(value.startsWith(\"PS8\"))\n), \"Unacceptable class or call number range\", null) # exclude AN, FC, NH, NJ, PS 8001-8599, PZ, QS -QZ, W+, Z1200+; TO DO: Z1200+"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "090",
    "expression": "grel:if( (value.startsWith(\"AN\")).or(value.startsWith(\"FC\")).or(value.startsWith(\"NH\")).or(value.startsWith(\"NJ\")).or(value.startsWith(\"PZ\")).or(value.startsWith(\"QS\")).or(value.startsWith(\"QT\")).or(value.startsWith(\"QZ\")).or(value.startsWith(\"W\") .or(value.startsWith(\"PS8\")) ), \"Unacceptable class or call number range\", null) # exclude AN, FC, NH, NJ, PS 8001-8599, PZ, QS -QZ, W+, Z1200+; TO DO: Z1200+",
    "onError": "keep-original",
    "newColumnName": "090 warning",
    "columnInsertIndex": 22,
    "description": "Create column 090 warning at index 22 based on column 090 using expression grel:if( (value.startsWith(\"AN\")).or(value.startsWith(\"FC\")).or(value.startsWith(\"NH\")).or(value.startsWith(\"NJ\")).or(value.startsWith(\"PZ\")).or(value.startsWith(\"QS\")).or(value.startsWith(\"QT\")).or(value.startsWith(\"QZ\")).or(value.startsWith(\"W\") .or(value.startsWith(\"PS8\")) ), \"Unacceptable class or call number range\", null) # exclude AN, FC, NH, NJ, PS 8001-8599, PZ, QS -QZ, W+, Z1200+; TO DO: Z1200+"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "050",
    "expression": "grel:if((value != null).and(cells[\"050 warning\"].value == null), 100, if((cells[\"090\"].value != null).and(cells[\"090 warning\"].value == null), 100, 0 ))",
    "onError": "set-to-blank",
    "newColumnName": "050/090 points",
    "columnInsertIndex": 20,
    "description": "Create column 050/090 points at index 20 based on column 050 using expression grel:if((value != null).and(cells[\"050 warning\"].value == null), 100, if((cells[\"090\"].value != null).and(cells[\"090 warning\"].value == null), 100, 0 ))"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "300$a",
    "expression": "grel:if(value ==\"\", \"lacks physical extent\", \"\")",
    "onError": "set-to-blank",
    "newColumnName": "300$a warning",
    "columnInsertIndex": 25,
    "description": "Create column 300$a warning at index 25 based on column 300$a using expression grel:if(value ==\"\", \"lacks physical extent\", \"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "300$c",
    "expression": "grel:if(value !=\"\", 100, 0)",
    "onError": "set-to-blank",
    "newColumnName": "300$c points",
    "columnInsertIndex": 27,
    "description": "Create column 300$c points at index 27 based on column 300$c using expression grel:if(value !=\"\", 100, 0)"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "300$e",
    "expression": "grel:if((value !=\"\"), \"\", \"Accompanying material\")",
    "onError": "set-to-blank",
    "newColumnName": "300$e warning",
    "columnInsertIndex": 31,
    "description": "Create column 300$e warning at index 31 based on column 300$e using expression grel:if((value !=\"\"), \"\", \"Accompanying material\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "245$n",
    "expression": "grel:if((value != \"\").or(cells[\"245$p\"].value != \"\"), \"\", \"Numbering indicates work in parts\")",
    "onError": "set-to-blank",
    "newColumnName": "245$n$p warning",
    "columnInsertIndex": 14,
    "description": "Create column 245$n$p warning at index 14 based on column 245$n using expression grel:if((value != \"\").or(cells[\"245$p\"].value != \"\"), \"\", \"Numbering indicates work in parts\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "040$b warning",
    "expression": "grel:[value, cells[\"245$n$p warning\"].value, cells[\"300$e warning\"].value, cells[\"26X warning\"].value, cells[\"000$17:1 warning\"].value, cells[\"300$a warning\"].value].join(\" ; \").replace(\";  ;  ;\",\";\").replace(\";  ;\",\";\")",
    "onError": "set-to-blank",
    "newColumnName": "Fails mandatory criteria",
    "columnInsertIndex": 8,
    "description": "Create column Fails mandatory criteria at index 8 based on column 040$b warning using expression grel:[value, cells[\"245$n$p warning\"].value, cells[\"300$e warning\"].value, cells[\"26X warning\"].value, cells[\"000$17:1 warning\"].value, cells[\"300$a warning\"].value].join(\" ; \").replace(\";  ;  ;\",\";\").replace(\";  ;\",\";\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Fails mandatory criteria",
    "expression": "grel:if(value.contains(\"lacks\"), \"Non-loadable\", if(value.contains(\"work in parts\"), \"Evaluate for work in parts\", if(value.contains(\"accompanying material\"), \"Evaluate for work in parts\", if(value.contains(\"Language\"), \"Deriveable\", if(value.contains(\"level\"), \"Consider for less than full cataloging\", \"Loadable\")))))) #TO DO: Apply criteria for 6XX to less-than-full records",
    "onError": "set-to-blank",
    "newColumnName": "Bucket",
    "columnInsertIndex": 9,
    "description": "Create column Bucket at index 9 based on column Fails mandatory criteria using expression grel:if(value.contains(\"lacks\"), \"Non-loadable\", if(value.contains(\"work in parts\"), \"Evaluate for work in parts\", if(value.contains(\"accompanying material\"), \"Evaluate for work in parts\", if(value.contains(\"Language\"), \"Deriveable\", if(value.contains(\"level\"), \"Consider for less than full cataloging\", \"Loadable\")))))) #TO DO: Apply criteria for 6XX to less-than-full records"
  }
]
