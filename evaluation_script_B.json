[
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "040$b",
    "expression": "grel:if(value==\"eng\", \"\", \"Language of cataloging is \" + value) #TO DO: handle repeated values (\"eng;eng\") differently?",
    "onError": "set-to-blank",
    "newColumnName": "040$b warning",
    "columnInsertIndex": 6,
    "description": "Create column 040$b warning at index 6 based on column 040$b using expression grel:if(value==\"eng\", \"\", \"Language of cataloging is \" + value) #TO DO: handle repeated values (\"eng;eng\") differently?"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "000$17:1",
    "expression": "grel:if((value !=\"I\").and(value !=\"8\").and(value !=\"\"), \"encoding level is \" + value, \"\")",
    "onError": "set-to-blank",
    "newColumnName": "000$17:1 warning",
    "columnInsertIndex": 14,
    "description": "Create column 000$17:1 warning at index 14 based on column 000$17:1 using expression grel:if((value !=\"I\").and(value !=\"8\").and(value !=\"\"), \"encoding level is \" + value, \"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "008$23",
    "expression": "grel:if(value==\"o\", \"Form of item is online resource\",\"\")",
    "onError": "set-to-blank",
    "newColumnName": "008$23 warning",
    "columnInsertIndex": 6,
    "description": "Create column 008$23 warning at index 6 based on column 008$23 using expression grel:if(value==\"o\", \"Form of item is online resource\",\"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "260",
    "expression": "grel:if((value == \"\").and(cells[\"264\"].value ==\"\"), \"lacks imprint\", \"\")",
    "onError": "set-to-blank",
    "newColumnName": "26X warning",
    "columnInsertIndex": 12,
    "description": "Create column 26X warning at index 12 based on column 260 using expression grel:if((value == \"\").and(cells[\"264\"].value ==\"\"), \"lacks imprint\", \"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "040$e",
    "expression": "grel:if(value == \"rda\", 100, 0) #TO DO: deal with repeated values (\"rda;rda\")",
    "onError": "set-to-blank",
    "newColumnName": "040$e points",
    "columnInsertIndex": 10,
    "description": "Create column 040$e points at index 10 based on column 040$e using expression grel:if(value == \"rda\", 100, 0) #TO DO: deal with repeated values (\"rda;rda\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "040$a",
    "expression": "grel:if((value == \"DLC\").or(cells[\"040$c\"].value == \"DLC\").or(cells[\"042$a\"].value == \"pcc\"), 100, 0)",
    "onError": "set-to-blank",
    "newColumnName": "040/042 points",
    "columnInsertIndex": 5,
    "description": "Create column 040/042 points at index 5 based on column 040$a using expression grel:if((value == \"DLC\").or(cells[\"040$c\"].value == \"DLC\").or(cells[\"042$a\"].value == \"pcc\"), 100, 0)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "050",
    "expression": "grel:forEach(value.split(\";\"),v,v.split(\"$a\")[1]).join(\"\\n\") # stack separate 050s and remove indicators",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column 050 using expression grel:forEach(value.split(\";\"),v,v.split(\"$a\")[1]).join(\"\\n\") # stack separate 050s and remove indicators"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "090",
    "expression": "grel:forEach(value.split(\";\"),v,v.split(\"$a\")[1]).join(\"\\n\") # stack separate 090s and remove indicators",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column 090 using expression grel:forEach(value.split(\";\"),v,v.split(\"$a\")[1]).join(\"\\n\") # stack separate 090s and remove indicators"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "050",
    "expression": "grel:if(or(inArray([\"AN\",\"FC\",\"NH\",\"NJ\",\"PZ\",\"QS\",\"QT\",\"QZ\"],value.split(\"\\n\")[0].substring(0,2)), value.split(\"\\n\")[0].startsWith(\"W\"), value.split(\"\\n\")[0].startsWith(\"PS8\"), value.split(\"\\n\")[0].substring(0,5).contains(/Z[1-9][2-9][0-9]{2}/) ),\"Unacceptable class or call number range\", if(or(value.contains(\"Bd.\"),\nvalue.contains(\"bd.\"),\nvalue.contains(\"band\"),\nvalue.contains(\"Band\"),\nvalue.contains(\"v.\"),\nvalue.contains(\"V.\"),\nvalue.contains(\"vol.\"),\nvalue.contains(\"Pt.\"),\nvalue.contains(\"pt.\"),\nvalue.contains(\"part\")\n),\"Classed-together call number\",\"\")) # exclude AN, FC, NH, NJ, PS 8001-8599, PZ, QS-QZ, W+, Z1200-9999; identify classed-together call numbers",
    "onError": "set-to-blank",
    "newColumnName": "050 warning",
    "columnInsertIndex": 32,
    "description": "Create column 050 warning at index 32 based on column 050 using expression grel:if(or(inArray([\"AN\",\"FC\",\"NH\",\"NJ\",\"PZ\",\"QS\",\"QT\",\"QZ\"],value.split(\"\\n\")[0].substring(0,2)), value.split(\"\\n\")[0].startsWith(\"W\"), value.split(\"\\n\")[0].startsWith(\"PS8\"), value.split(\"\\n\")[0].substring(0,5).contains(/Z[1-9][2-9][0-9]{2}/) ),\"Unacceptable class or call number range\", if(or(value.contains(\"Bd.\"),\nvalue.contains(\"bd.\"),\nvalue.contains(\"band\"),\nvalue.contains(\"Band\"),\nvalue.contains(\"v.\"),\nvalue.contains(\"V.\"),\nvalue.contains(\"vol.\"),\nvalue.contains(\"Pt.\"),\nvalue.contains(\"pt.\"),\nvalue.contains(\"part\")\n),\"Classed-together call number\",\"\")) # exclude AN, FC, NH, NJ, PS 8001-8599, PZ, QS-QZ, W+, Z1200-9999; identify classed-together call numbers"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "090",
    "expression": "grel:if(or(inArray([\"AN\",\"FC\",\"NH\",\"NJ\",\"PZ\",\"QS\",\"QT\",\"QZ\"],value.split(\"\\n\")[0].substring(0,2)), value.split(\"\\n\")[0].startsWith(\"W\"), value.split(\"\\n\")[0].startsWith(\"PS8\"), value.split(\"\\n\")[0].substring(0,5).contains(/Z[1-9][2-9][0-9]{2}/) ),\"Unacceptable class or call number range\", if(or(value.contains(\"Bd.\"),\nvalue.contains(\"bd.\"),\nvalue.contains(\"band\"),\nvalue.contains(\"Band\"),\nvalue.contains(\"v.\"),\nvalue.contains(\"V.\"),\nvalue.contains(\"vol.\"),\nvalue.contains(\"Pt.\"),\nvalue.contains(\"pt.\"),\nvalue.contains(\"part\")\n),\"Classed-together call number\",\"\")) # exclude AN, FC, NH, NJ, PS 8001-8599, PZ, QS-QZ, W+, Z1200-9999; identify classed-together call numbers",
    "onError": "set-to-blank",
    "newColumnName": "090 warning",
    "columnInsertIndex": 34,
    "description": "Create column 090 warning at index 34 based on column 090 using expression grel:if(or(inArray([\"AN\",\"FC\",\"NH\",\"NJ\",\"PZ\",\"QS\",\"QT\",\"QZ\"],value.split(\"\\n\")[0].substring(0,2)), value.split(\"\\n\")[0].startsWith(\"W\"), value.split(\"\\n\")[0].startsWith(\"PS8\"), value.split(\"\\n\")[0].substring(0,5).contains(/Z[1-9][2-9][0-9]{2}/) ),\"Unacceptable class or call number range\", if(or(value.contains(\"Bd.\"),\nvalue.contains(\"bd.\"),\nvalue.contains(\"band\"),\nvalue.contains(\"Band\"),\nvalue.contains(\"v.\"),\nvalue.contains(\"V.\"),\nvalue.contains(\"vol.\"),\nvalue.contains(\"Pt.\"),\nvalue.contains(\"pt.\"),\nvalue.contains(\"part\")\n),\"Classed-together call number\",\"\")) # exclude AN, FC, NH, NJ, PS 8001-8599, PZ, QS-QZ, W+, Z1200-9999; identify classed-together call numbers"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "050",
    "expression": "grel:if((value != null).and(cells[\"050 warning\"].value == null), 100, if((cells[\"090\"].value != null).and(cells[\"090 warning\"].value == null), 100, 0 ))",
    "onError": "set-to-blank",
    "newColumnName": "050/090 points",
    "columnInsertIndex": 20,
    "description": "Create column 050/090 points at index 20 based on column 050 using expression grel:if((value != null).and(cells[\"050 warning\"].value == null), 100, if((cells[\"090\"].value != null).and(cells[\"090 warning\"].value == null), 100, 0 ))"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "050",
    "expression": "grel:if(or(forNonBlank(cells[\"050\"].value,v,and(v.contains(\"$b\"), or(v.contains(/20\\d{2}/), v.contains(/19\\d{2}/))),false),forNonBlank(cells[\"090\"].value,v,and(v.contains(\"$b\"), or(v.contains(/20\\d{2}/), v.contains(/19\\d{2}/))),false)),\"\",\"no usable call number\") #TO-DO: consolidate 050, 090, and call # warnings",
    "onError": "set-to-blank",
    "newColumnName": "Call number warning",
    "columnInsertIndex": 33,
    "description": "Create column Call number warning at index 33 based on column 050 using expression grel:if(or(forNonBlank(cells[\"050\"].value,v,and(v.contains(\"$b\"), or(v.contains(/20\\d{2}/), v.contains(/19\\d{2}/))),false),forNonBlank(cells[\"090\"].value,v,and(v.contains(\"$b\"), or(v.contains(/20\\d{2}/), v.contains(/19\\d{2}/))),false)),\"\",\"no usable call number\") #TO-DO: consolidate 050, 090, and call # warnings"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "300$a",
    "expression": "grel:if(isBlank(value), \"lacks physical extent\",\nif(value.contains(\"volume\"),\"300$a indicates work in parts\",\"\"))",
    "onError": "set-to-blank",
    "newColumnName": "300$a warning",
    "columnInsertIndex": 36,
    "description": "Create column 300$a warning at index 36 based on column 300$a using expression grel:if(isBlank(value), \"lacks physical extent\",\nif(value.contains(\"volume\"),\"300$a indicates work in parts\",\"\"))"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "300$c",
    "expression": "grel:if(value !=\"\", 100, 0)",
    "onError": "set-to-blank",
    "newColumnName": "300$c points",
    "columnInsertIndex": 27,
    "description": "Create column 300$c points at index 27 based on column 300$c using expression grel:if(value !=\"\", 100, 0)"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "300$e",
    "expression": "grel:if((value == null), \"\", \"Accompanying material\")",
    "onError": "set-to-blank",
    "newColumnName": "300$e warning",
    "columnInsertIndex": 30,
    "description": "Create column 300$e warning at index 30 based on column 300$e using expression grel:if((value == null), \"\", \"Accompanying material\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "245$n",
    "expression": "grel:if((value != \"\").or(cells[\"245$p\"].value != \"\"), \"\", \"Numbering indicates work in parts\")",
    "onError": "set-to-blank",
    "newColumnName": "245$n$p warning",
    "columnInsertIndex": 14,
    "description": "Create column 245$n$p warning at index 14 based on column 245$n using expression grel:if((value != \"\").or(cells[\"245$p\"].value != \"\"), \"\", \"Numbering indicates work in parts\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "600",
    "expression": "grel:if(\n(value.substring(1, 2) == \"0\").or(cells[\"650\"].value.substring(1, 2) == \"0\").or(cells[\"651\"].value.substring(1, 2) == \"0\"), \nnull, \"no LC subject headings\")",
    "onError": "set-to-blank",
    "newColumnName": "6XX warning",
    "columnInsertIndex": 33,
    "description": "Create column 6XX warning at index 33 based on column 600 using expression grel:if(\n(value.substring(1, 2) == \"0\").or(cells[\"650\"].value.substring(1, 2) == \"0\").or(cells[\"651\"].value.substring(1, 2) == \"0\"), \nnull, \"no LC subject headings\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "655",
    "expression": "grel:if((value != null), 100, 0))",
    "onError": "set-to-blank",
    "newColumnName": "655 points",
    "columnInsertIndex": 37,
    "description": "Create column 655 points at index 37 based on column 655 using expression grel:if((value != null), 100, 0))"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "008$23 warning",
    "expression": "grel:filter([cells[\"008$23 warning\"].value, cells[\"040$b warning\"].value, cells[\"000$17:1 warning\"].value, cells['050 warning'].value, cells['090 warning'].value, cells['Call number warning'].value, cells['26X warning'].value, cells['245$n$p warning'].value, cells['300$a warning'].value, cells['300$e warning'].value, cells['6XX warning'].value ],v,isNonBlank(v)).join(\"\\n\")",
    "onError": "set-to-blank",
    "newColumnName": "Record warnings",
    "columnInsertIndex": 8,
    "description": "Create column Record warnings at index 8 based on column 008$23 warning using expression grel:filter([cells[\"008$23 warning\"].value, cells[\"040$b warning\"].value, cells[\"000$17:1 warning\"].value, cells['050 warning'].value, cells['090 warning'].value, cells['Call number warning'].value, cells['26X warning'].value, cells['245$n$p warning'].value, cells['300$a warning'].value, cells['300$e warning'].value, cells['6XX warning'].value ],v,isNonBlank(v)).join(\"\\n\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Record warnings",
    "expression": "grel:if(value.contains(\"lacks\"), \"4|Record has insufficient description\", if(or(value.contains(\"work in parts\"), value.contains(\"Accompanying material\")),\"5|Record is for multipart\", if(or(value.contains(\"Language\"), value.contains(\"online\")),\"6|Record is for online resource or uses non-english language of cataloging\", if(value.contains(\"subject\"), \"7|Loadable - record lacks subject headings\", if(value.contains(\"call number\"), \"8|Loadable - record lacks call number\", \"9|Loadable\") ) ) ) ) #REMOVED: if(value.contains(\"subject\"), if(cells[\"000$17:1\"].value.contains(\"8\"), \"Loadable\"... TO-DO: find better sorting/deduping method; apply criteria for 008/33; normalize case; make descriptions more consistent",
    "onError": "set-to-blank",
    "newColumnName": "Bucket",
    "columnInsertIndex": 9,
    "description": "Create column Bucket at index 9 based on column Record warnings using expression grel:if(value.contains(\"lacks\"), \"4|Record has insufficient description\", if(or(value.contains(\"work in parts\"), value.contains(\"Accompanying material\")),\"5|Record is for multipart\", if(or(value.contains(\"Language\"), value.contains(\"online\")),\"6|Record is for online resource or uses non-english language of cataloging\", if(value.contains(\"subject\"), \"7|Loadable - record lacks subject headings\", if(value.contains(\"call number\"), \"8|Loadable - record lacks call number\", \"9|Loadable\") ) ) ) ) #REMOVED: if(value.contains(\"subject\"), if(cells[\"000$17:1\"].value.contains(\"8\"), \"Loadable\"... TO-DO: find better sorting/deduping method; apply criteria for 008/33; normalize case; make descriptions more consistent"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Bucket",
    "expression": "grel:value.split(\"|\")[0].toNumber()",
    "onError": "set-to-blank",
    "newColumnName": "Bucket value",
    "columnInsertIndex": 10,
    "description": "Create column Bucket value at index 10 based on column Bucket using expression grel:value.split(\"|\")[0].toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Bucket",
    "expression": "grel:value.split(\"|\")[1]",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column Bucket using expression grel:value.split(\"|\")[1]"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "040/042 points",
    "expression": "grel:value + cells[\"040$e points\"].value + cells[\"050/090 points\"].value + cells[\"300$c points\"].value + cells[\"655 points\"].value",
    "onError": "set-to-blank",
    "newColumnName": "Points for preferred criteria",
    "columnInsertIndex": 6,
    "description": "Create column Points for preferred criteria at index 6 based on column 040/042 points using expression grel:value + cells[\"040$e points\"].value + cells[\"050/090 points\"].value + cells[\"300$c points\"].value + cells[\"655 points\"].value"
  }
]